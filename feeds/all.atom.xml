<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Paylogic developer portal</title><link href="http://developer.paylogic.com/" rel="alternate"></link><link href="http://developer.paylogic.com/feeds/all.atom.xml" rel="self"></link><id>http://developer.paylogic.com/</id><updated>2013-12-02T10:56:00+01:00</updated><entry><title>Prefill Registration Data</title><link href="http://developer.paylogic.com/articles/prefill-registration.html" rel="alternate"></link><updated>2013-12-02T10:56:00+01:00</updated><author><name>Spyros Ioakeimidis</name></author><id>tag:developer.paylogic.com,2013-12-02:articles/prefill-registration.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Paylogic offers a feature to allow the prefilling of the personal data of a
consumer during the sales process via a personalized URL. This can be used
whenever a merchant already has the data of the consumers and wants to offer
these consumers a more personalized and smooth ticketing process, or when a
pre-registration step is used. The following sections describe the steps that
third parties have to implement in order to provide the possibility of
prefilling the registration form in the front office.&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="json-data-format"&gt;
&lt;h2&gt;JSON data format&lt;/h2&gt;
&lt;p&gt;The first step is to construct the data. The data should be structured using
JSON. The JSON data should adhere to the following format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;first_name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Test Client First Name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;last_name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Test Client Last Name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test@testmail.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;gender&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;birth_date&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1978-10-07&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;phone_number&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0123456789&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;address&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Address 1A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;postal_code&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;9999AB&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;city&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Groningen&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;country&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;NL&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;gender&lt;/code&gt; attribute should contain a code according to &lt;a class="reference external" href="http://en.wikipedia.org/wiki/ISO/IEC_5218"&gt;ISO 5218&lt;/a&gt;, which specifies the following
codes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;0 = not known&lt;/li&gt;
&lt;li&gt;1 = male&lt;/li&gt;
&lt;li&gt;2 = female&lt;/li&gt;
&lt;li&gt;9 = not applicable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The format of the &lt;code&gt;birth_date&lt;/code&gt; attribute should be &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
This format is according to &lt;a class="reference external" href="http://en.wikipedia.org/wiki/ISO_8601"&gt;ISO 8601&lt;/a&gt;.
Finally, the &lt;code&gt;country&lt;/code&gt; code attribute should contain a value according to
&lt;a class="reference external" href="http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm"&gt;ISO 3166&lt;/a&gt;.
For example, for The Netherlands the country code &lt;code&gt;NL&lt;/code&gt; should be used. It
should be mentioned that no certain format is required for &lt;code&gt;postal_code&lt;/code&gt;,
as long as its length is less than or equal to 12.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="compression-and-encoding"&gt;
&lt;h2&gt;Compression and Encoding&lt;/h2&gt;
&lt;p&gt;The second step is to compress and encode the data. Compression helps to reduce
the length of the data, as the URL should contain up to a maximum number of
characters. It is not only that the JSON data itself might be long. Encoding
also increases the length of the data by approximately 33%.&lt;/p&gt;
&lt;p&gt;The pseudo code below illustrates the process of encoding and compression. It
also includes the creation of the JSON data. The data should first be compressed
and then encoded.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
create the JSON data

create a string out of the JSON data

compress the data using gzip compatible compression

encode the data using base64 and make them url safe
&lt;/pre&gt;
&lt;p&gt;The way encoding and compression can be implemented depends on which programming
language is used. A simple implementation is illustrated both for Python and
PHP. If there are any questions regarding the implementation, then please contact
the Paylogic support team.&lt;/p&gt;
&lt;div class="section" id="python"&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;p&gt;The compression is done using the &lt;a class="reference external" href="http://www.zlib.net/"&gt;zlib&lt;/a&gt;
standard python module. The data is encoded to utf-8 prior to compression. Data
encoding is performed using base64 as specified in &lt;a class="reference external" href="http://tools.ietf.org/html/rfc3548.html"&gt;RFC 3548&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;zlib&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlsafe_b64encode&lt;/span&gt;

&lt;span class="c"&gt;# construct the json data&lt;/span&gt;
&lt;span class="n"&gt;json_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;first_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Test Client First Name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# create a string of the json data&lt;/span&gt;
&lt;span class="n"&gt;json_data_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# encode the data to utf8 and compress it&lt;/span&gt;
&lt;span class="n"&gt;compressed_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_data_string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c"&gt;# encode the data using base64 and urlsafe&lt;/span&gt;
&lt;span class="n"&gt;encoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urlsafe_b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compressed_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="php"&gt;
&lt;h3&gt;PHP&lt;/h3&gt;
&lt;p&gt;The compression is done using the &lt;a class="reference external" href="http://php.net/manual/en/function.gzcompress.php"&gt;gzcompress&lt;/a&gt;
method, which uses the &lt;a class="reference external" href="http://www.zlib.net/"&gt;zlib&lt;/a&gt; data format. The data is
encoded to utf-8 prior to compression. Data encoding is performed using base64
as specified in &lt;a class="reference external" href="http://tools.ietf.org/html/rfc3548.html"&gt;RFC 3548&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;# create a string of the json data&lt;/span&gt;
&lt;span class="nv"&gt;$json_data_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;first_name&amp;quot;: &amp;quot;Test Client First Name&amp;quot;, ... }&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# encode data to utf8 and compress it&lt;/span&gt;
&lt;span class="nv"&gt;$compressed_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gzcompress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utf8_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$json_data_string&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;# encode the data using base64&lt;/span&gt;
&lt;span class="nv"&gt;$encoded_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;base64_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$compressed_data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# make data urlsafe&lt;/span&gt;
&lt;span class="nv"&gt;$encoded_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;$encoded_data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="transferring-the-data"&gt;
&lt;h2&gt;Transferring the data&lt;/h2&gt;
&lt;p&gt;The third step is to append the encoded and compressed data to the landing page
URL. The landing page URL is the URL that is usually included within the
invitation emails. The encoded and compressed data should be appended to the
landing page URL &lt;strong&gt;after&lt;/strong&gt; the fragment identifier (&lt;strong&gt;#&lt;/strong&gt;). The advantage of
this approach is that data after the fragment identifier is not sent over the
network and is only used client-side.&lt;/p&gt;
&lt;p&gt;The implementation of this is left to the third parties. The only constraint is
that the appended data should have a specific form. We assume that the landing
page URL contains some query parameters (substituted with '...' in the
following example for clarity) and &lt;code&gt;FGRAhdfhasAHDFA&lt;/code&gt; is the encoded and
compressed data. Then, a landing page URL with the appended data would have the
following form:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
http://tickets.company.com/?...#pld=FGRAhdfhasAHDFA
&lt;/pre&gt;
&lt;p&gt;It is important to use &lt;code&gt;pld&lt;/code&gt; as a parameter, as this is also used on the
side of Paylogic, when retrieving the data from the URL. The above method will
work if Paylogic handles the creation of the landing page.&lt;/p&gt;
&lt;div class="section" id="third-party-handles-landing-page"&gt;
&lt;h3&gt;Third party handles landing page&lt;/h3&gt;
&lt;p&gt;In case a third party handles the creation of the landing page, then one more
step needs to be performed. The Javascript code below should be appended at the
end of the landing page HTML document. This ensures that the data is read from
the landing page URL and that it is appended in the queue URL, which resides as
an iframe inside the landing page HTML document.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;getHashParam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/([^#&amp;amp;]+)/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This is to ensure that if the variable contains &amp;#39;=&amp;#39; then they remain in the value.&lt;/span&gt;
    &lt;span class="c1"&gt;// for example: pld=FHadfsdhFJASDF3423==&lt;/span&gt;
    &lt;span class="c1"&gt;// In this case:&lt;/span&gt;
    &lt;span class="c1"&gt;//   key: pld&lt;/span&gt;
    &lt;span class="c1"&gt;//   value: FHadfsdhFJASDF3423==&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/=(.+)?/&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pld&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;paylogic-frontoffice&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;getHashParam&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="integration"></category></entry><entry><title>You are welcome</title><link href="http://developer.paylogic.com/articles/you-are-welcome.html" rel="alternate"></link><updated>2013-06-19T18:00:00+02:00</updated><author><name>Berco Beute</name></author><id>tag:developer.paylogic.com,2013-06-19:articles/you-are-welcome.html</id><summary type="html">&lt;div class="section" id="you-are-welcome"&gt;
&lt;h2&gt;You are welcome&lt;/h2&gt;
&lt;p&gt;We at Paylogic are passionate about software. We have the craft of software engineering on a pedestal, we love to write clean code, we are interested in high availability, we are intrigued by distributed systems, we like to experiment with emerging technologies, we take pride in the applications we write, deploy and maintain. And we are fortunate enough to be able to live our passion through our jobs. Paylogic is a company that is both commercially and technically quite ambitious. Its goal is to redesign the world of ticketing with creative and reliable ticketing solutions which empower the event organizer in their relation with their visitors. The commercial ambitions are achieved through technical leadership. Technical leadership is achieved by both hiring top software engineers and selecting the right technologies and tools. One of the fundamental choices in that respect is the commitment to open source software. Paylogic is fully built upon open source software and firmly rooted in the open source culture. Some key technologies we use are for example Python, SQLAlchemy, Django, Flask, JavaScript and MySQL. Interestingly enough the Zen of Python is largely used as guidance for running the technical side of Paylogic. But we are not just using open source software, we are also actively giving back. We contribute to many open source projects, we run PyGrunn, the biggest Python conference in the Netherlands, we open source as much of the software we write as possible, we give lectures at universities about our work, and we participate in a number of open source related conferences. Somehow all of our open source efforts were quite detached and independent. This developer portal and blog should change that. This will be the central hub for the outside world to learn about the technology within Paylogic. We will announce open source projects and write about technical topics.&lt;/p&gt;
&lt;p&gt;In the end it is all about sharing, and we share because we care. We hope you appreciate our effort and share back. Whether it is code, ideas or feedback. So welcome to the tech world of Paylogic and please join the discussions!&lt;/p&gt;
&lt;/div&gt;
</summary><category term=""></category></entry><entry><title>Continuous Delivery</title><link href="http://developer.paylogic.com/articles/continuous-delivery.html" rel="alternate"></link><updated>2013-05-30T01:08:00+02:00</updated><author><name>Òscar Vilaplana</name></author><id>tag:developer.paylogic.com,2013-05-30:articles/continuous-delivery.html</id><summary type="html">&lt;p&gt;&lt;em&gt;When you do Continuous Delivery you can deploy whenever you want: you
made it as easy as possible and you have become very good at it.
Everyone in the Engineering and Operations teams knows how to deploy
your application to any environment. Product can always see the latest
bells and whistles as they are built because you have Stable servers
running the latest versions of the application. You implement big
changes gradually and show them to the Product Team while keeping the
customer’s experience stable. When you decide to release, you have made
sure all things will work and you know how to react if nevertheless they
break, without fires or panic.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Continuous Deployment also forces you to do many right things:
repeatable builds; the exact same deployment process in all
environments, including the developer’s machines and a development
environment that is as close as possible to Production;
backwards-compatible database changes; easy rollbacks; code that is
split into components; good tests…&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="taming-the-software-lion"&gt;
&lt;h2&gt;Taming the Software Lion&lt;/h2&gt;
&lt;div class="section" id="s"&gt;
&lt;h3&gt;1800s&lt;/h3&gt;
&lt;p&gt;It’s the 1800s. The lion is beaten into submission through fear, brute
force and confusion. That famous tamer wielding a chair—the lion is not
scared of the chair, it’s confused of it: why is this chair floating
here? And why is this guy holding it?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="modern-times"&gt;
&lt;h3&gt;Modern times&lt;/h3&gt;
&lt;p&gt;Nowadays tamers understand the lion’s psychology. They condition the
lion to behave as they want, they tie behaviors to signals and reward
the right behaviors. They build up trust.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="taming-the-software-lionrecap"&gt;
&lt;h2&gt;Taming the Software Lion—recap&lt;/h2&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;1800s&lt;/h3&gt;
&lt;p&gt;It’s the 1800s. Code is beaten into submission through iterations of
half-working attempts at hand-made deployments; with fear, because it
works and we barely understand it, so don’t touch it because &lt;em&gt;it works&lt;/em&gt;;
with weapons, because when it breaks it’s hacked some more until it
works (install a missing dependency, copy the forgotten templates…); and
with confusion: it’s difficult to see what’s actually installed, how,
what part of it is needed and what extra changes are needed to make it
work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;Modern times&lt;/h3&gt;
&lt;p&gt;Nowadays software engineers understand that deploying software is hard,
and so they must get very good at it and automate it with clean
procedures so that it’s repeatable and debugable. They use continuous
integration, which rewards them with a green light when the build
passes. They take care of the health of the build. They deploy it
frequently to a staging server that the stakeholders can see. When
software breaks, they know how to act.&lt;/p&gt;
&lt;p&gt;Engineers build up trust: they can trust that the software works and
that it does what it’s supposed to do; and the stakeholders trust them
in that the product is built to their expectations.&lt;/p&gt;
&lt;div class="section" id="what-you-need-to-implement-continuous-delivery"&gt;
&lt;h4&gt;What You Need to implement Continuous Delivery&lt;/h4&gt;
&lt;p&gt;To implement Continuous Delivery, you need the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A team&lt;/li&gt;
&lt;li&gt;Working software&lt;/li&gt;
&lt;li&gt;A repeatable build&lt;/li&gt;
&lt;li&gt;An automated deployment&lt;/li&gt;
&lt;li&gt;A way to rollback&lt;/li&gt;
&lt;li&gt;An automated release&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="team"&gt;
&lt;h2&gt;Team&lt;/h2&gt;
&lt;p&gt;Every single member of the Team must be committed to quality—process
can’t compensate for lack of commitment. This commitment includes the
constant learning of best practices and ways to improve.&lt;/p&gt;
&lt;p&gt;Everyone in the Team must know how to deploy and release software (also
in Live) and how to maintain the deployment and release scripts.
Everyone is responsible for these scripts: there cannot be a deployment
guru. For this, the deployment scripts must be clear, concise and
simple.&lt;/p&gt;
&lt;p&gt;All environments must be as similar as possible; this includes the
development machines. The Team must deploy the software in their
development machines using the exact same deployment and release scripts
that are used in Production and Staging.&lt;/p&gt;
&lt;p&gt;In addition to this, everyone in the Team is responsible for:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Having working Stable and Production environments.&lt;/li&gt;
&lt;li&gt;Having a green CI.&lt;/li&gt;
&lt;li&gt;Never committing broken code.&lt;/li&gt;
&lt;li&gt;Adding sufficient tests.&lt;/li&gt;
&lt;li&gt;Having good quality code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="working-software"&gt;
&lt;h2&gt;Working Software&lt;/h2&gt;
&lt;p&gt;Software, even software that &lt;em&gt;works&lt;/em&gt;, is not working software unless it
has automated tests:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Unit Tests&lt;/li&gt;
&lt;li&gt;Functional Tests&lt;/li&gt;
&lt;li&gt;Acceptance Tests (testing from the user’s viewpoint, not from a lower
layer)&lt;/li&gt;
&lt;li&gt;Infrastructure and Configuration Tests (for example, testing that the
server must be able to send e-mail).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tests are not second-class citizens: the standards of their cleanness,
readability and maintainability must be as high as those of the rest of
the software. This quality must be maintained: tests must not be let rot
when changes accumulate.&lt;/p&gt;
&lt;p&gt;All these tests must be run locally before committing changes and also
automatically using Continuous Integration. Because tests are executed
often they should be kept fast.&lt;/p&gt;
&lt;p&gt;Simple mistakes, such as the ones that pylint catches, should be checked
even before running any tests.&lt;/p&gt;
&lt;p&gt;The build must be kept green at all times. Engineers should check in
their changes often, and be ready to rollback if the change (which
passed the local tests) breaks the build. Many small changes are
preferable to a single big change: they are easier to debug and to
rollback.&lt;/p&gt;
&lt;p&gt;Both Engineering and QA are responsible for the quality of the software
(this includes the tests).&lt;/p&gt;
&lt;p&gt;When a test breaks, it must be fixed. There are two possible moments for
fixing it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Right now. If the failure is legit, you must drop what you are doing
and fix the it.&lt;/li&gt;
&lt;li&gt;As soon as possible. If the failure is due to a false positive and
it’s not possible to fix it right now, the test must be fixed as soon
as possible. This should not be later than the end of the day.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If a test breaks because of changes that are being made, either the test
must be fixed right now or the changes must be reverted.&lt;/p&gt;
&lt;p&gt;Tests cannot be disabled to be fixed later. Later won’t come any time
soon.&lt;/p&gt;
&lt;p&gt;Any code must be peer-reviewed before being merged into the Stable
branch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="repeatable-build"&gt;
&lt;h2&gt;Repeatable Build&lt;/h2&gt;
&lt;p&gt;The build must be automated, and used by all members of the Team in all
environments. The build process must contain no manual steps or changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="deployment-script"&gt;
&lt;h2&gt;Deployment Script&lt;/h2&gt;
&lt;p&gt;As for the build, the deployment script must be automated and used by
all members of the Team in all environments. Deploying the software
should be accomplished by a single command:&lt;/p&gt;
&lt;blockquote&gt;
&lt;em&gt;./deploy.sh&lt;/em&gt; &amp;lt;environment&amp;gt; &amp;lt;version&amp;gt;&lt;/blockquote&gt;
&lt;p&gt;The only way to deploy is to follow the pipeline: tests, peer-review,
merge, test, automated build, automated deploy. This includes
emergencies: many problems come from skipping the pipeline and hacking a
solution out of urgency.&lt;/p&gt;
&lt;p&gt;If the pipeline is skipped and software is deployed by hand, the system
is left on an unknown state. If the hack fails it will be very difficult
to duplicate it and investigate what went wrong. Most of the time of
fixing a problem is usually spent in searching its cause.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rollback"&gt;
&lt;h2&gt;Rollback&lt;/h2&gt;
&lt;p&gt;When a deployment fails it must be easy to rollback. There are many
strategies to accomplish this, for example Blue-Green Deployments and
Canary Deployments.&lt;/p&gt;
&lt;div class="section" id="blue-green-deployments"&gt;
&lt;h3&gt;Blue-Green Deployments&lt;/h3&gt;
&lt;p&gt;Have two separate environments: green is where the customers go when
they go to Production; blue is not.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Deploy the new version on blue.&lt;/li&gt;
&lt;li&gt;Test blue and do manual acceptance.&lt;/li&gt;
&lt;li&gt;Switch blue to green and green to blue: now Blue is serving
Production&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the deployment goes wrong, rolling back is a matter of switching
green and blue. It’s easy to investigate what went wrong because blue is
still running the new code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="canary-deployment"&gt;
&lt;h3&gt;Canary Deployment&lt;/h3&gt;
&lt;p&gt;Deploy the new version on a fraction of the servers and have it run
alongside the old version. Once it’s confirmed that it works as
expected, extend the deployment to the rest of the servers.&lt;/p&gt;
&lt;p&gt;This strategy can also be used to do A/B testing or assessing the
performance impact of new features.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="rollback-the-database"&gt;
&lt;h2&gt;Rollback the Database&lt;/h2&gt;
&lt;p&gt;For rollbacks to be possible, the database changes must be kept
backwards compatible. There is no way around this. When this is not
possible, make a plan on how to rollback.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="automated-release"&gt;
&lt;h2&gt;Automated Release&lt;/h2&gt;
&lt;p&gt;When all the previous steps are in place, an automated release is just
the last step on the chain. While an automated release to Production may
not be desirable in all cases, an automated release to a Staging or
Integration environment will allow the stakeholders to use the latest
version of the software while it’s being developed and before it goes to
Production.&lt;/p&gt;
&lt;p&gt;Frequent, smaller changes are preferred to a big release: small releases
have shorter Time to Recover: if it goes wrong it will be easier to find
what went wrong if the amount of changes is small.&lt;/p&gt;
&lt;p&gt;Releasing is hard. If it hurts, do it more often.&lt;/p&gt;
&lt;div class="section" id="hidden-features"&gt;
&lt;h3&gt;Hidden Features&lt;/h3&gt;
&lt;p&gt;In some cases it is useful to release features but keep them
inaccessible or only accessible to a few users. There are several tools
to make this easy;
&lt;a class="reference external" href="https://github.com/disqus/gargoyle"&gt;gargoyle&lt;/a&gt;
is a popular one for Django.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tips"&gt;
&lt;h2&gt;Tips&lt;/h2&gt;
&lt;div class="section" id="split-in-components"&gt;
&lt;h3&gt;Split In Components&lt;/h3&gt;
&lt;p&gt;Split your software in components that can be deployed independently.&lt;/p&gt;
&lt;p&gt;A component:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Is reusable&lt;/li&gt;
&lt;li&gt;Is replaceable with something else that implements the same API.&lt;/li&gt;
&lt;li&gt;Is independently deployable.&lt;/li&gt;
&lt;li&gt;Encapsulates a coherent set of behaviors and responsibilities of the
system.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Splitting your software in components encourages a clear delineation of
responsibilities and makes understanding and changing the code easier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rehearse-releases"&gt;
&lt;h3&gt;Rehearse Releases&lt;/h3&gt;
&lt;p&gt;Releasing is hard. Rehearse it and get very good at it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="manage-your-infrastructure"&gt;
&lt;h3&gt;Manage your Infrastructure&lt;/h3&gt;
&lt;p&gt;Write tests that verify that your infrastructure behaves as you expect
and provides the necessary functionality.&lt;/p&gt;
&lt;p&gt;Automate all infrastructure changes that can be automated, and document
the rest.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="equal-environments"&gt;
&lt;h3&gt;Equal Environments&lt;/h3&gt;
&lt;p&gt;All environments must be as similar as possible. Use
&lt;a class="reference external" href="http://www.vagrantup.com/"&gt;vagrant&lt;/a&gt;
to develop.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="automate-everything"&gt;
&lt;h3&gt;Automate Everything&lt;/h3&gt;
&lt;p&gt;A process that is automated is repeatable and easier to debug. Automate
everything that can be automated.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;I gave a talk about this at DjangoCon Europe 2013. Here are the
&lt;a class="reference external" href="https://bitbucket.org/grimborg/continuousdeployment/src/tip/continuous-deployment.pdf"&gt;slides&lt;/a&gt;;
the video will be available soon.&lt;/p&gt;
&lt;p&gt;If this interests you, you may want to check these books:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912/ref=sr_1_1?ie=UTF8&amp;amp;qid=1369904950&amp;amp;sr=8-1"&gt;Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.amazon.com/Continuous-Integration-Improving-Software-Reducing/dp/0321336380/ref=sr_1_1?ie=UTF8&amp;amp;qid=1369905064&amp;amp;sr=8-1"&gt;Continuous Integration: Improving Software Quality and Reducing Risk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.amazon.com/Agile-Testing-Practical-Guide-Testers/dp/0321534468/ref=sr_1_1?ie=UTF8&amp;amp;qid=1369905098&amp;amp;sr=8-1"&gt;Agile Testing: A Practical Guide for Testers and Agile Team&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1369905116&amp;amp;sr=1-1"&gt;Test Driven Development: By Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="agile"></category><category term="continuous delivery"></category><category term="deployment"></category><category term="release"></category><category term="testing"></category><category term="qa"></category></entry><entry><title>Using Debian packages for Python deployments</title><link href="http://developer.paylogic.com/articles/debian-packages.html" rel="alternate"></link><updated>2013-05-14T00:28:00+02:00</updated><author><name>Peter Odding</name></author><id>tag:developer.paylogic.com,2013-05-14:articles/debian-packages.html</id><summary type="html">&lt;p&gt;At Paylogic we use Debian packages to deploy our Python applications. This
article explains how we got started.&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#disadvantages-of-python-packages" id="id3"&gt;Disadvantages of Python packages&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#virtual-environments" id="id4"&gt;Virtual environments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#making-sense-of-the-python-packaging-ecosystem" id="id5"&gt;Making sense of the Python packaging ecosystem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#advantages-of-debian-packages" id="id6"&gt;Advantages of Debian packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id1" id="id7"&gt;Getting started with Debian packaging&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#creating-your-first-debian-package" id="id8"&gt;Creating your first Debian package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#creating-a-debian-package-repository" id="id9"&gt;Creating a Debian package repository&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#hosting-the-package-repository" id="id10"&gt;Hosting the package repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#using-the-package-repository" id="id11"&gt;Using the package repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#installing-the-gpg-key" id="id12"&gt;Installing the GPG key&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#wrapping-up" id="id13"&gt;Wrapping up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;This is a large article but if you just want to get started building Debian
packages you can jump straight to the section on &lt;a class="reference internal" href="#getting-started-with-debian-packaging"&gt;getting started with Debian
packaging&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="disadvantages-of-python-packages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Disadvantages of Python packages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python has its own packaging infrastructure and there are a lot of people who
like it, but for us it doesn't come close to a full solution:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.python.org"&gt;PyPI&lt;/a&gt; and/or distribution websites go down regularly, usually at the exact
time you need them to perform a live deployment :-)&lt;/li&gt;
&lt;li&gt;Python packages cannot and therefore do not declare their binary dependencies,
because there is no portable way to do so (the packages names are different
in every Linux distribution, let alone other operating systems)&lt;/li&gt;
&lt;li&gt;Python packages don't control init.d scripts, cron tabs, configuration files,
etc. while we really do need to install and manage these files...&lt;/li&gt;
&lt;li&gt;What's with the whole &lt;a class="reference external" href="http://docs.python.org/2/library/distutils.html"&gt;Distutils&lt;/a&gt;, &lt;a class="reference external" href="https://pypi.python.org/pypi/setuptools"&gt;Setuptools&lt;/a&gt;, &lt;a class="reference external" href="https://pypi.python.org/pypi/distribute"&gt;Distribute&lt;/a&gt;, &lt;a class="reference external" href="https://pypi.python.org/pypi/Distutils2"&gt;Distutils2&lt;/a&gt; and
&lt;a class="reference external" href="https://pypi.python.org/pypi/distlib"&gt;Distlib&lt;/a&gt; confusion?! Please for the love of god just merge the common
subset, bless one tool and get this whole mess over with already! For more
details about this subject see &lt;a class="reference external" href="http://stackoverflow.com/questions/6344076/differences-between-distribute-distutils-setuptools-and-distutils2/14753678#14753678"&gt;Differences between distribute, distutils,
setuptools and distutils2?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="virtual-environments"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;Virtual environments&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There's one more significant thing, which is that Python packages favor virtual
environments over system wide installations. Why do we say this?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;easy_install&lt;/tt&gt; doesn't support removal of packages&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; does support removal of packages but does not support anything like
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt; autoremove&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of our problems with virtual environments is that we've seen them break in
various ways, for example because of security updates to the system-wide Python
installation (Google for &lt;a class="reference external" href="https://www.google.com/search?q=ImportError%3A%20cannot%20import%20name%20urandom"&gt;ImportError: cannot import name urandom&lt;/a&gt;). This is
one of the reasons why we prefer virtual machines over virtual environments to
isolate our production deployments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="making-sense-of-the-python-packaging-ecosystem"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Making sense of the Python packaging ecosystem&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As mentioned above the Python packaging ecosystem is a bit of a mess. For an
overview of the situation and some of the problems, refer to the following
external resources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://guide.python-distribute.org/introduction.html#current-state-of-packaging"&gt;The Hitchhiker's Guide to Packaging: Current State of Packaging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://lucumr.pocoo.org/2012/6/22/hate-hate-hate-everywhere/"&gt;Python Packaging: Hate, hate, hate everywhere&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.workaround.org/setuptools-versioning-wtf"&gt;setuptools versioning - wtf?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I sometimes hear people call Debian package management complex. They certainly
have a point, but as a DevOps who wants to do their work properly, Debian and
Python are both complex, the difference is that Debian is (mostly) a pleasure
to work with... The Python packaging ecosystem is very fragmented and
underdocumented while in Debian there is almost always a canonical, documented
way to do things properly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="advantages-of-debian-packages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Advantages of Debian packages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here are a couple of notable advantages of using Debian packages:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;They provide a controlled process for installing, removing, upgrading and
downgrading packages (for example for doing new releases, but also rolling
back existing releases)&lt;/li&gt;
&lt;li&gt;Dependencies on operating system packages are formalized as proper package
dependencies instead of being written down in wiki pages, personal notes, or
worse, not written down at all...&lt;/li&gt;
&lt;li&gt;The steps that should be executed in every environment where a package is
deployed are formalized in pre/post installation/removal scripts&lt;/li&gt;
&lt;li&gt;The packages are built on a dedicated host so production machines don't need
a build environment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's also the fact that we get to use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt;&lt;/tt&gt; more and we (generally)
love &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt;&lt;/tt&gt; :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;span id="getting-started-with-debian-packaging"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Getting started with Debian packaging&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Debian package management is a complex topic, however getting started requires
little upfront knowledge nor does it require a complex build environment. In
fact most of the tools you'll need are probably already installed if you're
running Debian or a derivative Linux distribution!&lt;/p&gt;
&lt;div class="section" id="creating-your-first-debian-package"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Creating your first Debian package&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To create a simple Debian package we only need a single file and a single
command. Here's how you get started:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Create a directory to hold the files contained in the package.&lt;/span&gt;
mkdir my-package &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;my-package

&lt;span class="c"&gt;# Create a directory with the package&amp;#39;s control files.&lt;/span&gt;
mkdir DEBIAN

&lt;span class="c"&gt;# Create the main control file with package metadata.&lt;/span&gt;
cat &amp;gt; DEBIAN/control &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class="s"&gt;Package: name-of-package&lt;/span&gt;
&lt;span class="s"&gt;Version: 1.0&lt;/span&gt;
&lt;span class="s"&gt;Section: universe/web&lt;/span&gt;
&lt;span class="s"&gt;Priority: optional&lt;/span&gt;
&lt;span class="s"&gt;Architecture: all&lt;/span&gt;
&lt;span class="s"&gt;Installed-Size: 1&lt;/span&gt;
&lt;span class="s"&gt;Maintainer: $USER&lt;/span&gt;
&lt;span class="s"&gt;Description: Explanation of why name-of-package is so cool&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;

&lt;span class="c"&gt;# Build the package using the accepted naming scheme.&lt;/span&gt;
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;awk &lt;span class="s1"&gt;&amp;#39;/^Package:/ {print $2}&amp;#39;&lt;/span&gt; DEBIAN/control&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;awk &lt;span class="s1"&gt;&amp;#39;/^Version:/ {print $2}&amp;#39;&lt;/span&gt; DEBIAN/control&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;ARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;awk &lt;span class="s1"&gt;&amp;#39;/^Architecture:/ {print $2}&amp;#39;&lt;/span&gt; DEBIAN/control&lt;span class="k"&gt;)&lt;/span&gt;
dpkg-deb --build . &lt;span class="nv"&gt;$NAME_&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;_&lt;span class="nv"&gt;$ARCH&lt;/span&gt;.deb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assuming you're on a Debian/Ubuntu system, the above commands should be enough
to build a simple package. Any files in the working directory (excluding the
special &lt;tt class="docutils literal"&gt;DEBIAN&lt;/tt&gt; directory) will be included in the package as if the
directory containing the &lt;tt class="docutils literal"&gt;DEBIAN&lt;/tt&gt; package is the root of the file system.&lt;/p&gt;
&lt;p&gt;The resulting &lt;tt class="docutils literal"&gt;*.deb&lt;/tt&gt; file can be installed using &lt;tt class="docutils literal"&gt;dpkg &lt;span class="pre"&gt;-i&lt;/span&gt; $filename&lt;/tt&gt;,
however this won't automatically install dependencies, instead &lt;tt class="docutils literal"&gt;dpkg&lt;/tt&gt; will
error out when dependencies are missing... When this happens you can run
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt; install &lt;span class="pre"&gt;-f&lt;/span&gt;&lt;/tt&gt; to install the dependencies. After that you can rerun
the &lt;tt class="docutils literal"&gt;dpkg&lt;/tt&gt; command; it should now succeed. Read on if you're interested in a
more streamlined experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-a-debian-package-repository"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Creating a Debian package repository&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As mentioned earlier &lt;tt class="docutils literal"&gt;dpkg&lt;/tt&gt; doesn't automatically pull in dependencies. If
you use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt;&lt;/tt&gt; it will do what you expect however &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt;&lt;/tt&gt; does not
support installation of local &lt;tt class="docutils literal"&gt;*.deb&lt;/tt&gt; archives; it needs a repository. In
other words, once you start using dependencies you will want to setup a Debian
package repository for your packages! Here's how you get started:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Create repository layout, copy packages.&lt;/span&gt;
mkdir -p repo/binary
cp *.deb repo/binary
&lt;span class="nb"&gt;cd &lt;/span&gt;repo

&lt;span class="c"&gt;# Create list of packages.&lt;/span&gt;
rm -f Packages Packages.gz Release Release.gpg  &lt;span class="c"&gt;# cleanup after previous run&lt;/span&gt;
dpkg-scanpackages -m . | sed &lt;span class="s1"&gt;&amp;#39;s@: \./@: @&amp;#39;&lt;/span&gt; &amp;gt; Packages

&lt;span class="c"&gt;# Create compressed copy of list.&lt;/span&gt;
cat Packages | gzip &amp;gt; Packages.gz

&lt;span class="c"&gt;# Generate release file.&lt;/span&gt;
rm -f Release Release.gpg  &lt;span class="c"&gt;# cleanup after previous run&lt;/span&gt;
&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; apt-ftparchive release . &amp;gt; Release.tmp
mv Release.tmp Release

&lt;span class="c"&gt;# Sign release file.&lt;/span&gt;
rm -f Release.gpg  &lt;span class="c"&gt;# cleanup after previous run&lt;/span&gt;
gpg -abs -o Release.gpg Release
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are several gotcha's in the above piece of shell script:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We cleanup generated files from previous runs because their presence
corrupts the generated files&lt;/li&gt;
&lt;li&gt;We modify the output of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;dpkg-scanpackages&lt;/span&gt;&lt;/tt&gt; to change for example
&lt;tt class="docutils literal"&gt;./test_1.0_all.deb&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;test_1.0_all.deb&lt;/tt&gt; (for some reason &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt;&lt;/tt&gt;
doesn't like &lt;tt class="docutils literal"&gt;Packages&lt;/tt&gt; files with leading &lt;tt class="docutils literal"&gt;./&lt;/tt&gt; fragments)&lt;/li&gt;
&lt;li&gt;We clear the &lt;tt class="docutils literal"&gt;$LANG&lt;/tt&gt; environment variable so that we are sure the
&lt;tt class="docutils literal"&gt;Release&lt;/tt&gt; file is properly formatted regardless of the value of &lt;tt class="docutils literal"&gt;$LANG&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;You need to have a private GPG key to sign the &lt;tt class="docutils literal"&gt;Release&lt;/tt&gt; file; if you don't
have one yet you'll need to create one using the command &lt;tt class="docutils literal"&gt;gpg &lt;span class="pre"&gt;--gen-key&lt;/span&gt;&lt;/tt&gt;
(you may find this &lt;a class="reference external" href="http://www.madboa.com/geek/gpg-quickstart/"&gt;GPG quick start&lt;/a&gt; useful)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="hosting-the-package-repository"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id10"&gt;Hosting the package repository&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;After running the above commands, the directory &lt;cite&gt;repo/&lt;/cite&gt; can be served using a
regular web server (e.g. &lt;a class="reference external" href="http://httpd.apache.org/"&gt;Apache&lt;/a&gt; or &lt;a class="reference external" href="http://nginx.org/"&gt;Nginx&lt;/a&gt;). No specific configuration is
required because the repository contains only static files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-the-package-repository"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id11"&gt;Using the package repository&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The package repository can be registered in a Debian/Ubuntu system by creating
the file &lt;tt class="docutils literal"&gt;/etc/apt/sources.list.d/example.sources.list&lt;/tt&gt; with the following
contents:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
deb http://server-address ./
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-the-gpg-key"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id12"&gt;Installing the GPG key&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Before the package repository can be used from remote machines, the GPG key
used to sign the Release file has to be installed on the remote machines.
Assuming you have SSH and sudo access to the server where you generated the GPG
key &lt;cite&gt;and&lt;/cite&gt; the one where you want to install the GPG key, the following command
will install the GPG key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh build-server sudo -i gpg --armor --export | ssh target-host sudo apt-key add -
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="wrapping-up"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Wrapping up&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;That's it really, at least to get started. Now consider how easy it is to write
some Python scripts that automatically build these packages for you based on
the contents of one or more version control systems and suddenly you're looking
at a viable deployment strategy!&lt;/p&gt;
&lt;p&gt;There are even people who build Python &lt;a class="reference external" href="http://www.virtualenv.org/en/latest/"&gt;virtual environments&lt;/a&gt; and ship those
in Debian packages. It may sound revolting at first, but give it a moment to
sink in; it has its advantages :-)&lt;/p&gt;
&lt;p&gt;In future articles we'll dive into more advanced topics like pre/post
installation/removal scripts, dpkg triggers and generation of configuration
files. Stay tuned!&lt;/p&gt;
&lt;!-- External references: --&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="deployment"></category><category term="automation"></category><category term="debian"></category><category term="packaging"></category></entry><entry><title>pip-accel: Accelerator for pip, the Python package manager</title><link href="http://developer.paylogic.com/articles/pip-accel.html" rel="alternate"></link><updated>2013-05-14T00:28:00+02:00</updated><author><name>Peter Odding</name></author><id>tag:developer.paylogic.com,2013-05-14:articles/pip-accel.html</id><summary type="html">&lt;p&gt;Recently we published &lt;a class="reference external" href="https://github.com/paylogic/pip-accel"&gt;pip-accel&lt;/a&gt; to &lt;a class="reference external" href="https://github.com/paylogic/pip-accel"&gt;GitHub&lt;/a&gt; and &lt;a class="reference external" href="https://pypi.python.org/pypi/pip-accel"&gt;PyPI&lt;/a&gt;, in this article we'll
tell you why and how we created this project.&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#introduction" id="id1"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#at-paylogic-we-deploy-our-code-bases-a-lot" id="id2"&gt;At Paylogic we deploy our code bases a lot&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#python-deployment-strategies" id="id3"&gt;Python deployment strategies&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#drawbacks-of-virtual-environments" id="id4"&gt;Drawbacks of virtual environments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#big-projects-have-a-lot-of-dependencies" id="id5"&gt;Big projects have a lot of dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pip-can-be-slow-and-unreliable" id="id6"&gt;pip can be slow and unreliable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#optimizing-pip" id="id7"&gt;Optimizing pip&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#brute-force-caching" id="id8"&gt;Brute force caching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#so-what-about-a-more-granular-approach" id="id9"&gt;So what about a more granular approach?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#keeping-pip-off-the-internet" id="id10"&gt;Keeping pip off the internet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#caching-compiled-packages" id="id11"&gt;Caching compiled packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#putting-it-all-together-pip-accel" id="id12"&gt;Putting it all together: pip-accel&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#how-fast-is-it" id="id13"&gt;How fast is it?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#more-information" id="id14"&gt;More information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#related-projects" id="id15"&gt;Related projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The pip-accel program is a wrapper for &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt;, the Python package manager. It
accelerates the usage of pip to initialize Python &lt;a class="reference external" href="http://www.virtualenv.org/en/latest/"&gt;virtual environments&lt;/a&gt; given
one or more &lt;a class="reference external" href="http://www.pip-installer.org/en/latest/cookbook.html#requirements-files"&gt;requirements&lt;/a&gt; files. It does so by combining the following two
approaches:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Source distribution downloads are cached and used to generate a local index
of source distribution archives. If all your dependencies are pinned to
absolute versions whose source distribution downloads were previously
cached, pip-accel won't need a network connection at all! This is one of the
reasons why pip can be so slow: given absolute pinned dependencies available
in the download cache it will still scan PyPI (the online Python package
index) and distribution websites.&lt;/li&gt;
&lt;li&gt;Binary distributions are used to speed up the process of installing
dependencies with binary components (like M2Crypto and LXML). Instead of
recompiling these dependencies again for every virtual environment we
compile them once and cache the result as a binary &lt;tt class="docutils literal"&gt;*.tar.gz&lt;/tt&gt;
distribution.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the rest of this article we will discuss why pip-accel was created and dive
into the particulars of how it works. At the end we'll also look at some
related projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="at-paylogic-we-deploy-our-code-bases-a-lot"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;At Paylogic we deploy our code bases a lot&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Currently we have the following environments where we deploy our code bases:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Work laptops of the engineers and devops&lt;/li&gt;
&lt;li&gt;Continuous integration server with 10 slaves (we are using &lt;a class="reference external" href="http://jenkins-ci.org/"&gt;Jenkins&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Stable testing environment (continuously deployed)&lt;/li&gt;
&lt;li&gt;Staging testing environment (managed w/ releases)&lt;/li&gt;
&lt;li&gt;Production servers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In some of these environments (specifically in the continuous integration and
stable environments) new code bases can be deployed every few minutes when
engineers are publishing new changes or tested changes are being merged into
the main repository.&lt;/p&gt;
&lt;div class="section" id="python-deployment-strategies"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id3"&gt;Python deployment strategies&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For Python deployments there are two main ways to deploy a project and its dependencies:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;System-wide installation&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.virtualenv.org/en/latest/"&gt;Virtual environments&lt;/a&gt; (or an equivalent construction, isolated from the system)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At Paylogic we use system-wide installations on production (like) hosts and
virtual environments everywhere else. Why don't we use virtual environments on
production systems? Virtual environments do have some drawbacks (see below) and
we have the luxury of being able to isolate applications on the level of
virtual machines instead of Python virtual environments. This additional layer
of isolation is worth it for us.&lt;/p&gt;
&lt;div class="section" id="drawbacks-of-virtual-environments"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id4"&gt;Drawbacks of virtual environments&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Python virtual environments are by their nature a bit fragile. Quoting from
&lt;a class="reference external" href="http://virtualenv.org/en/latest/news.html"&gt;the virtualenv website&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Warning:&lt;/strong&gt; &lt;em&gt;Python bugfix releases 2.6.8, 2.7.3, 3.1.5 and 3.2.3 include
a change that will cause import random to fail with “cannot import name
urandom” on any virtualenv created on a Unix host with an earlier release
of Python 2.6/2.7/3.1/3.2, if the underlying system Python is upgraded.
This is due to the fact that a virtualenv uses the system Python’s standard
library but contains its own copy of the Python interpreter, so an upgrade
to the system Python results in a mismatch between the version of the
Python interpreter and the version of the standard library. It can be fixed
by removing $ENV/bin/python and re-running virtualenv on the same
target directory with the upgraded Python.&lt;/em&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="big-projects-have-a-lot-of-dependencies"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Big projects have a lot of dependencies&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At Paylogic we create large virtual environments with &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt;: At the time of
writing our main code base has 84 dependencies if we include testing,
documentation and transitive dependencies (43 of those dependencies are required
in production). Some of these dependencies require SWIG and a compiler and for
large modules the compilation can take a while.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pip-can-be-slow-and-unreliable"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;pip can be slow and unreliable&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So we build a lot of virtual environments, which can be really slow. The actual
creation of the environment only takes a couple of seconds, but installing all
of the dependencies can take minutes! For example at the time of writing it
takes about seven minutes to install all dependencies of Paylogic's main code
base using &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What's worse is that PyPI and distribution websites can be very unreliable.
One day everything works fine, the next day the same packages you downloaded
previously can no longer be downloaded. Usually these are transient errors, you
just have to be very patient and/or retry until it works.&lt;/p&gt;
&lt;p&gt;We love virtual environments and pip so we don't necessarily need to replace
either of those, but it would be nice to solve these two problems.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="optimizing-pip"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Optimizing pip&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this section we'll discuss ways in which we can speed up pip.&lt;/p&gt;
&lt;div class="section" id="brute-force-caching"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Brute force caching&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If no requirements changed, we can re-use a previously built and cached virtual
environment. &lt;a class="reference external" href="https://pypi.python.org/pypi/terrarium"&gt;Terrarium&lt;/a&gt; takes this approach. There is a drawback however: If a
single dependency changes, we can't re-use the cache and have to rebuild
everything. This is not exactly ideal for continuous integration/deployment
environments (which is a big use case for us).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-what-about-a-more-granular-approach"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;So what about a more granular approach?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are two obvious targets:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Given absolute version numbers available in the download cache, &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt; still
goes out and scans PyPI and distribution websites. This is documented
behavior:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pip offers a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--download-cache&lt;/span&gt;&lt;/tt&gt; option for installs to prevent redundant
downloads of archives from PyPI. The point of this cache is not to
circumvent the index crawling process, but to just prevent redundant
downloads. Items are stored in this cache based on the url the archive
was found at, not simply the archive name. If you want a fast/local
install solution that circumvents crawling PyPI, see the &lt;a class="reference external" href="http://www.pip-installer.org/en/latest/cookbook.html#fast-local-installs"&gt;Fast &amp;amp; Local
Installs&lt;/a&gt; Cookbook entry.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Binary packages are recompiled for every virtual environment. This is
because historically &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt; did not support binary distributions (support for
the &lt;a class="reference external" href="http://wheel.readthedocs.org/en/latest/"&gt;Wheel&lt;/a&gt; format is now coming) so the only option was to go for source
packages, which require compilation. However there is of course no reason
why previous results can not be reused.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="keeping-pip-off-the-internet"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id10"&gt;Keeping pip off the internet&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Our first problem was that pip's index crawling process is very slow, so we
want to avoid it when possible. So how can we keep &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt; from always scanning
PyPI and distribution websites when all of the dependencies are already
available in the local download cache? Here's how:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;We generate a local source package index based on the &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt; download cache.
This local source package index is just a directory with source packages
downloaded from PyPI and distribution websites.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We then run &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt; as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install --no-index --find-links&lt;span class="o"&gt;=&lt;/span&gt;file://&lt;span class="nv"&gt;$LOCAL_INDEX&lt;/span&gt; --requirement&lt;span class="o"&gt;=&lt;/span&gt;example.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the command succeeds it means all of the requirements (including the
transitive dependencies) can be satisfied from the local index. In this case
we don't need a network connection!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="caching-compiled-packages"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id11"&gt;Caching compiled packages&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Our second problem was that &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt; always recompiles binary modules. This isn't
very hard to fix. Here's how you create a dumb binary distribution (a tar
archive with binary artifacts specific to your current system):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python setup.py bdist_dumb --format&lt;span class="o"&gt;=&lt;/span&gt;gztar
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately these distributions are really dumb:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tar tf ipython-0.13.2.linux-x86_64.tar.gz | tail -n1
./home/peter/.virtualenvs/pip-accel/lib/python2.6/site-packages/IPython/lib/security.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dumb binary distributions contain hard coded pathnames specific to the virtual
environment we created them for! This is useless in any other context. Of
course with a bit of work these pathnames can be normalized to the root of the
(virtual) environment...&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="putting-it-all-together-pip-accel"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Putting it all together: pip-accel&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So now you know why and how &lt;a class="reference external" href="https://github.com/paylogic/pip-accel"&gt;pip-accel&lt;/a&gt; was born! It's available on &lt;a class="reference external" href="https://pypi.python.org/pypi/pip-accel"&gt;PyPI&lt;/a&gt; and
&lt;a class="reference external" href="https://github.com/paylogic/pip-accel"&gt;GitHub&lt;/a&gt; but if you just want to try it out you can use the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install pip-accel
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The command &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pip-accel&lt;/span&gt;&lt;/tt&gt; will be installed in your environment. You should be
able to use it just like &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt;, simply type &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pip-accel&lt;/span&gt;&lt;/tt&gt; where you would
previously type &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; on the command line (you can even alias it if you
like).&lt;/p&gt;
&lt;div class="section" id="how-fast-is-it"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;How fast is it?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To give you an idea of how effective &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pip-accel&lt;/span&gt;&lt;/tt&gt; is, below are the results of
a test to build a virtual environment for our main code base:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="13%" /&gt;
&lt;col width="48%" /&gt;
&lt;col width="16%" /&gt;
&lt;col width="22%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Program&lt;/th&gt;
&lt;th class="head"&gt;Description&lt;/th&gt;
&lt;th class="head"&gt;Duration&lt;/th&gt;
&lt;th class="head"&gt;Percentage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;pip&lt;/td&gt;
&lt;td&gt;Default configuration&lt;/td&gt;
&lt;td&gt;444 seconds&lt;/td&gt;
&lt;td&gt;100% (baseline)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pip&lt;/td&gt;
&lt;td&gt;With download cache (first run)&lt;/td&gt;
&lt;td&gt;416 seconds&lt;/td&gt;
&lt;td&gt;94%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pip&lt;/td&gt;
&lt;td&gt;With download cache (second run)&lt;/td&gt;
&lt;td&gt;318 seconds&lt;/td&gt;
&lt;td&gt;72%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pip-accel&lt;/td&gt;
&lt;td&gt;First run&lt;/td&gt;
&lt;td&gt;397 seconds&lt;/td&gt;
&lt;td&gt;89%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pip-accel&lt;/td&gt;
&lt;td&gt;Second run&lt;/td&gt;
&lt;td&gt;30 seconds&lt;/td&gt;
&lt;td&gt;7%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We have some ideas on how to make this even faster :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-information"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;More information&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you're interested in more details about &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pip-accel&lt;/span&gt;&lt;/tt&gt;, the readme on GitHub
contains more information about the &lt;a class="reference external" href="https://github.com/paylogic/pip-accel#control-flow-of-pip-accel"&gt;internal control flow&lt;/a&gt;. You're also free
to browse the &lt;a class="reference external" href="https://github.com/paylogic/pip-accel/blob/master/pip_accel/__init__.py"&gt;source code&lt;/a&gt;; it's only a few hundred lines of well documented
Python code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="related-projects"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;Related projects&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are a lot of projects that try to improve the Python deployment process
and it is definitely worth looking around to evaluate your options:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.python.org/pypi/terrarium"&gt;Terrarium&lt;/a&gt; generates and caches complete virtual environments, accomplishing
some of the same goals as &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pip-accel&lt;/span&gt;&lt;/tt&gt; but at a different granularity level&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.buildout.org/"&gt;Buildout&lt;/a&gt; is about reliable and repeatable deployments just like
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pip-accel&lt;/span&gt;&lt;/tt&gt; but it tackles non-Python applications as well, in effect
reproducing complete deployment environments&lt;/li&gt;
&lt;li&gt;The &lt;a class="reference external" href="http://doc.devpi.net/"&gt;devpi project&lt;/a&gt; implements the server and client side of a Python
cheese shop (package index) with lots of additional features to support
Python package release, testing and installation activities&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- External references: --&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="deployment"></category><category term="virtual environments"></category><category term="automation"></category><category term="pip"></category><category term="open source"></category><category term="packaging"></category></entry></feed>